 private void validateCashUnitStock(CashStocksActivateContextRequest request) throws CashException {
        // Step 1: Fetch provided cashUnitIds from the request
        Map<Long, Integer> providedCashUnitMap = request.getCashUnitStockContextList().stream()
                .collect(Collectors.toMap(
                        cashUnit -> Long.valueOf(cashUnit.getCashUnitId().trim()), // Convert to Long
                        CashUnitStockContext::getCashUnitStockQuantity,
                        Integer::sum)); // If duplicates exist, sum their quantities
        // Step 2: Fetch CashUnitStocks from the last CashStockSession directly from DB
        List<CashUnitStock> lastSessionCashUnitStocks =
                cashUnitStockRepository.findCashUnitStocksByCashStockId(Long.valueOf(request.getCashStockId()));
        // Step 3: Create a map of expected cashUnitIds and their stages
        Map<Long, String> expectedCashUnitStageMap = lastSessionCashUnitStocks.stream()
                .collect(Collectors.toMap(cashUnitStock -> cashUnitStock.getCashUnit().getId(),
                        cashUnitStock -> cashUnitStock.getCashUnitStockStageValue().getName()));

        // Step 4: Validate provided Cash Units match expected Cash Units and their stages
        for (Long providedCashUnitId : providedCashUnitMap.keySet()) {
            String expectedStage = expectedCashUnitStageMap.get(providedCashUnitId);
            if (!"OPENED".equalsIgnoreCase(expectedStage)) {
                throw new CashException("KASH_10000002","CashStockStatusName of the CashStockId provided must be OPEN.", HttpStatus.BAD_REQUEST,"error","");
            }   }
        // Step 5: Ensure no missing CashUnitStocks
        List<Long> missingCashUnits = expectedCashUnitStageMap.keySet().stream()
                .filter(id -> !providedCashUnitMap.containsKey(id))
                .toList();
        if (!missingCashUnits.isEmpty()) {
            throw new CashException("KASH_10000006","The list of Cash Unit Stock provided must contain the same Cash Unit registered in the last Cash Stock Session and the stage of the Cash Unit Stock.", HttpStatus.BAD_REQUEST,Constants.FE_ERROR,"");
        }

    }
