private void validateCashUnitStock(CashStocksActivateContextRequest request) throws CashException {
    log.info("Validating Cash Unit Stocks for CashStockId: {}", request.getCashStockId());

    // Step 1: Fetch provided Cash Unit IDs and their quantities from the request
    Map<Long, Integer> providedCashUnitMap = request.getCashUnitStockContextList().stream()
            .collect(Collectors.toMap(
                    cashUnit -> Long.valueOf(cashUnit.getCashUnitId().trim()), // Convert to Long
                    CashUnitStockContext::getCashUnitStockQuantity,
                    Integer::sum)); // If duplicates exist, sum their quantities

    // Step 2: Fetch CashUnitStocks from the last CashStockSession
    List<CashUnitStock> lastSessionCashUnitStocks =
            cashUnitStockRepository.findCashUnitStocksByCashStockId(Long.valueOf(request.getCashStockId()));

    if (lastSessionCashUnitStocks.isEmpty()) {
        throw new CashException("KASH_10000006", "No previous Cash Unit Stocks found for this Cash Stock.", 
                HttpStatus.BAD_REQUEST, "Validation error", "");
    }

    // Step 3: Map of last session's Cash Units and their expected stages
    Map<Long, String> expectedCashUnitStageMap = lastSessionCashUnitStocks.stream()
            .collect(Collectors.toMap(
                    cashUnitStock -> cashUnitStock.getCashUnit().getId(),
                    cashUnitStock -> cashUnitStock.getCashUnitStockStageValue().getName()));

    // Step 4: Validate provided Cash Units match expected Cash Units and their stages
    for (Long providedCashUnitId : providedCashUnitMap.keySet()) {
        String expectedStage = expectedCashUnitStageMap.get(providedCashUnitId);

        if (expectedStage == null) {
            throw new CashException("KASH_10000006", "Unexpected Cash Unit provided in the request.", 
                    HttpStatus.BAD_REQUEST, "Validation error", "");
        }

        // Validate that the stage in request matches the last session
        if (!expectedStage.equalsIgnoreCase("OPENED")) {  // Ensure correct stage
            throw new CashException("KASH_10000002", "CashStockStatusName of the provided CashStockId must be 'OPENED'.", 
                    HttpStatus.BAD_REQUEST, "Validation error", "");
        }
    }

    // Step 5: Ensure no missing CashUnitStocks
    List<Long> missingCashUnits = expectedCashUnitStageMap.keySet().stream()
            .filter(id -> !providedCashUnitMap.containsKey(id))
            .toList();
    if (!missingCashUnits.isEmpty()) {
        throw new CashException("KASH_10000006", "The provided list of Cash Unit Stocks must match those in the last session.", 
                HttpStatus.BAD_REQUEST, "Validation error", "");
    }

    // Step 6: Validate total amount of CashUnitStocks matches CashStockOperationAmount
    BigInteger calculatedAmount = request.getCashUnitStockContextList().stream()
            .map(stock -> BigInteger.valueOf(stock.getCashUnitStockQuantity())
                    .multiply(BigInteger.valueOf(stock.getDenomination()))) // Quantity * Denomination
            .reduce(BigInteger.ZERO, BigInteger::add);

    if (!calculatedAmount.equals(BigInteger.valueOf(request.getCashStockOperationAmount()))) {
        throw new CashException("KASH_10000008", "Total amount of Cash Unit Stocks does not match CashStockOperationAmount.", 
                HttpStatus.BAD_REQUEST, "Validation error", "");
    }

    log.info("Validation successful for CashStockId: {}", request.getCashStockId());
}
